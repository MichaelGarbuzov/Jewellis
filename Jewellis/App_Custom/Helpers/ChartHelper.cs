using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace Jewellis.App_Custom.Helpers
{
    /// <summary>
    /// Represents a helper for charts.
    /// </summary>
    public static class ChartHelper
    {

        /// <summary>
        /// Holds the <see cref="Random"/> object to be used with random values.
        /// </summary>
        private static Random _random = new Random();

        #region Public Static API

        /// <summary>
        /// Generates random colors to be displayed in a chart, by the specified number of elements in the chart (count).
        /// </summary>
        /// <param name="count">The number of elements in the chart to generate colors.</param>
        /// <returns>Returns a string array of unique random colors (RGB), by the number of elements in the chart (count).</returns>
        public static string[] GenerateColorsRandomly(int count)
        {
            string[] array = new string[count];
            for (int i = 0; i < count; i++)
            {
                array[i] = Color.FromArgb(_random.Next(256), _random.Next(256), _random.Next(256)).ToHexString();
            }
            return array;
        }

        /// <summary>
        /// Generates different colors to be displayed in a chart, by the specified key names.
        /// </summary>
        /// <param name="keys">The key collection in a dictionary.</param>
        /// <returns>Returns a string array of unique colors (RGB), by the specified key names.</returns>
        public static string[] GenerateColorsByKeys(Dictionary<string, string>.KeyCollection keys)
        {
            return ChartHelper.GenerateColorsByKeys(keys.ToArray());
        }

        /// <summary>
        /// Generates different colors to be displayed in a chart, by the specified key names.
        /// </summary>
        /// <param name="keyNames">Key names to generate a unique color for each key name.</param>
        /// <returns>Returns a string array of unique colors (RGB), by the specified key names.</returns>
        public static string[] GenerateColorsByKeys(string[] keyNames)
        {
            string[] array = new string[keyNames.Length];
            MD5 md5 = MD5.Create();
            for (int i = 0; i < keyNames.Length; i++)
            {
                byte[] hash = md5.ComputeHash(Encoding.UTF8.GetBytes(keyNames[i]));
                array[i] = Color.FromArgb(hash[0], hash[1], hash[2]).ToHexString();
            }
            return array;
        }

        /// <summary>
        /// Generates color shades to be displayed in a chart, by the specified base color and number of shades to generate.
        /// </summary>
        /// <param name="count">The number of elements in the chart to generate colors.</param>
        /// <param name="baseColorHex">The base color (in hex) to generate shades from.</param>
        /// <returns>Returns a string array of unique colors (RGB) generated by the specified parameters.</returns>
        public static string[] GenerateColorShades(int count, string baseColorHex)
        {
            return ChartHelper.GenerateColorShades(count, new Color().FromHex(baseColorHex));
        }

        /// <summary>
        /// Generates color shades to be displayed in a chart, by the specified base color and number of shades to generate.
        /// </summary>
        /// <param name="count">The number of elements in the chart to generate colors.</param>
        /// <param name="baseColor">The base color to generate shades from.</param>
        /// <returns>Returns a string array of unique colors (RGB) generated by the specified parameters.</returns>
        public static string[] GenerateColorShades(int count, Color baseColor)
        {
            string[] array = new string[count];
            MD5 md5 = MD5.Create();
            Color tmp = baseColor;
            float parts = 0.25f;
            for (int i = 0; i < count; i++)
            {
                array[i] = tmp.ToHexString();
                tmp = tmp.Lerp(Color.White, (float)parts);
            }
            return array;
        }

        /// <summary>
        /// Gets the y-axis of hours.
        /// </summary>
        /// <returns>Returns a string array the y-axis of hours.</returns>
        public static string[] GetHoursYAxis()
        {
            string[] hours = new string[24];
            for (int i = 0; i < 24; i++)
            {
                hours[i] = new DateTime(1, 1, 1, i, 0, 0).ToString("t");
            }
            return hours;
        }

        #endregion

    }
}
